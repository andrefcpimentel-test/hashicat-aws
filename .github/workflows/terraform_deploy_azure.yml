name: 'Terraform Deploy Production - Azure'

on: workflow_dispatch

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        sparse-checkout: azure
        sparse-checkout-cone-mode: false

    # This step is needed because expo-github-action does not support paths.
    # Therefore all mobile app assets should be moved to the project root.
    - name: Move_files
      run: |
          ls -lah
          mv azure/* .
          rm -rf azure
          ls -lah    

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: "1.1.4"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        TF_API_TOKEN: ${{ env.TF_API_TOKEN }}

    # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan
    #   env:
    #     TF_API_TOKEN: ${{ env.TF_API_TOKEN }}

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve 
      env:
        TF_API_TOKEN: ${{ env.TF_API_TOKEN }}
